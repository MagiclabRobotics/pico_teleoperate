# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

# import xrTracking_pb2 as xrTracking__pb2
import robot_kinemic.pico_stream.grpc_msg.xrTracking_pb2 as xrTracking__pb2




class TrackingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamControllerUpdates = channel.unary_stream(
                '/xrTracking.TrackingService/StreamControllerUpdates',
                request_serializer=xrTracking__pb2.ControllerUpdate.SerializeToString,
                response_deserializer=xrTracking__pb2.ControllerUpdate.FromString,
                )
        self.StreamHandUpdates = channel.unary_stream(
                '/xrTracking.TrackingService/StreamHandUpdates',
                request_serializer=xrTracking__pb2.HandUpdate.SerializeToString,
                response_deserializer=xrTracking__pb2.HandUpdate.FromString,
                )
        self.StreamMotionTrackerKeyAction = channel.unary_stream(
                '/xrTracking.TrackingService/StreamMotionTrackerKeyAction',
                request_serializer=xrTracking__pb2.MotionTrackerKeyAction.SerializeToString,
                response_deserializer=xrTracking__pb2.MotionTrackerKeyAction.FromString,
                )
        self.StreamButtonInfo = channel.stream_stream(
                '/xrTracking.TrackingService/StreamButtonInfo',
                request_serializer=xrTracking__pb2.ButtonInfo.SerializeToString,
                response_deserializer=xrTracking__pb2.Result.FromString,
                )


class TrackingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamControllerUpdates(self, request, context):
        """监听控制器追踪
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamHandUpdates(self, request, context):
        """监听手部追踪
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamMotionTrackerKeyAction(self, request, context):
        """监听追踪器按键
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamButtonInfo(self, request_iterator, context):
        """同步按钮触发的状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrackingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamControllerUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamControllerUpdates,
                    request_deserializer=xrTracking__pb2.ControllerUpdate.FromString,
                    response_serializer=xrTracking__pb2.ControllerUpdate.SerializeToString,
            ),
            'StreamHandUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamHandUpdates,
                    request_deserializer=xrTracking__pb2.HandUpdate.FromString,
                    response_serializer=xrTracking__pb2.HandUpdate.SerializeToString,
            ),
            'StreamMotionTrackerKeyAction': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamMotionTrackerKeyAction,
                    request_deserializer=xrTracking__pb2.MotionTrackerKeyAction.FromString,
                    response_serializer=xrTracking__pb2.MotionTrackerKeyAction.SerializeToString,
            ),
            'StreamButtonInfo': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamButtonInfo,
                    request_deserializer=xrTracking__pb2.ButtonInfo.FromString,
                    response_serializer=xrTracking__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xrTracking.TrackingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrackingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamControllerUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/xrTracking.TrackingService/StreamControllerUpdates',
            xrTracking__pb2.ControllerUpdate.SerializeToString,
            xrTracking__pb2.ControllerUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamHandUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/xrTracking.TrackingService/StreamHandUpdates',
            xrTracking__pb2.HandUpdate.SerializeToString,
            xrTracking__pb2.HandUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamMotionTrackerKeyAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/xrTracking.TrackingService/StreamMotionTrackerKeyAction',
            xrTracking__pb2.MotionTrackerKeyAction.SerializeToString,
            xrTracking__pb2.MotionTrackerKeyAction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamButtonInfo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/xrTracking.TrackingService/StreamButtonInfo',
            xrTracking__pb2.ButtonInfo.SerializeToString,
            xrTracking__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
