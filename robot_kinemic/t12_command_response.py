"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class t12_command_response(object):
    __slots__ = ["robot_fsm_cmd", "a_flag", "b_flag", "c_flag", "d_flag", "x_vel_des", "y_vel_des", "yaw_vel_des"]

    __typenames__ = ["int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None]

    def __init__(self):
        self.robot_fsm_cmd = 0
        self.a_flag = 0
        self.b_flag = 0
        self.c_flag = 0
        self.d_flag = 0
        self.x_vel_des = 0.0
        self.y_vel_des = 0.0
        self.yaw_vel_des = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(t12_command_response._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbbbbfff", self.robot_fsm_cmd, self.a_flag, self.b_flag, self.c_flag, self.d_flag, self.x_vel_des, self.y_vel_des, self.yaw_vel_des))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != t12_command_response._get_packed_fingerprint():
            raise ValueError("Decode error")
        return t12_command_response._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = t12_command_response()
        self.robot_fsm_cmd, self.a_flag, self.b_flag, self.c_flag, self.d_flag, self.x_vel_des, self.y_vel_des, self.yaw_vel_des = struct.unpack(">bbbbbfff", buf.read(17))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if t12_command_response in parents: return 0
        tmphash = (0xc62ed5e348c6bc6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if t12_command_response._packed_fingerprint is None:
            t12_command_response._packed_fingerprint = struct.pack(">Q", t12_command_response._get_hash_recursive([]))
        return t12_command_response._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", t12_command_response._get_packed_fingerprint())[0]

